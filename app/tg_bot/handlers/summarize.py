from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

from app.services.rabbit.utils.open_summ_queue import open_queue
from app.tg_bot.keyboards.summ_main import make_row_keyboard
from app.tg_bot.keyboards.inline import channel_list_urls, add_buttons_to_keyboard, date_keyboard
from app.tg_bot.states.summ import Summ
from app.services.crud.users import User
from app.services.crud.tasks import Task
from app.services.rabbit.utils.parser_init import client
from app.tg_bot.bot import bot

router = Router()


@router.message(Command(commands=["summarize"]))
async def summ_catch(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text="–ü–æ –∫–∞–∫–∏–º –∫–∞–Ω–∞–ª–∞–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é?",
        reply_markup=make_row_keyboard(["–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", "–ü–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –∫–∞–Ω–∞–ª–∞–º"])
    )
    await state.update_data(tg_id=message.from_user.id)
    await state.set_state(Summ.choosing_what_base_summ)


@router.message(StateFilter(Summ.choosing_what_base_summ), F.text.in_(["–ü–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –∫–∞–Ω–∞–ª–∞–º"]))
async def summ_base(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data['tg_id']
    user = User(tg_id=user_id)
    channel_list = user.get_tg_trackable_channels()[0]
    await state.update_data(channel_list=channel_list)
    if not channel_list:
        await message.answer(
            text="–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
            reply_markup=make_row_keyboard(["–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ",
                                            "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã"])
        )
        await state.set_state(Summ.no_base)

    else:
        task_list = []
        await state.update_data(task_list=task_list)
        await state.set_state(Summ.choosing_what_summ)
        await summ_base_func(message, state)


@router.message(StateFilter(Summ.choosing_what_summ))
async def summ_base_func(message: Message, state: FSMContext):
    await message.answer(
        text="üìïüìïüìïüìïüìï",
        reply_markup=ReplyKeyboardRemove())
    await summ_base_func_2(message, state)


@router.message(StateFilter(Summ.choosing_what_summ))
async def summ_base_func_2(message: Message, state: FSMContext):
    user_data = await state.get_data()
    channel_list = user_data['channel_list']
    await state.update_data(chat_id=message.chat.id)
    channels = []
    for channel in channel_list:
        async with client:
            channel_entity = await client.get_entity(channel)
            channels.append(channel_entity)

    res_ch = list(zip(channels, channel_list))
    keyboard, ch_names = channel_list_urls(res_ch)

    new_buttons = [("‚ñ™Ô∏è–í—ã–±–æ—Ä –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏", "date"),
                   ("‚ñ™Ô∏è–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", "date_all")]
    keyboard = add_buttons_to_keyboard(keyboard, new_buttons)

    await bot.send_message(
        chat_id=message.chat.id,
        text="–ü–æ –∫–∞–∫–∏–º –∫–∞–Ω–∞–ª–∞–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é? \n"
             "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏:",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

    await state.set_state(Summ.choosing)


@router.callback_query(StateFilter(Summ.choosing), F.data != "date", F.data != "date_all")
async def choose_channels(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    channel_link = callback.data
    task_list = user_data['task_list']
    task_list.append(channel_link)
    channel_list = user_data['channel_list']
    chat_id = user_data['chat_id']
    if channel_link in channel_list:
        channel_list.remove(channel_link)
    if not channel_list:
        formatted_string = '\n üîò'.join(f'{item}' for item in task_list)
        formatted_string = 'üîò' + formatted_string
        await bot.send_message(
            chat_id=chat_id,
            text=f"–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã –≤—Å–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:\n {formatted_string}",
            reply_markup=ReplyKeyboardRemove(),
            disable_web_page_preview=True
        )
        await state.set_state(Summ.choosing_date)
        await choose_date(callback, state)
    else:
        channels = []
        for channel in channel_list:
            async with client:
                channel_entity = await client.get_entity(channel)
                channels.append(channel_entity)
        res_ch = list(zip(channels, channel_list))
        keyboard, ch_names = channel_list_urls(res_ch)

        new_buttons = [("‚ñ™Ô∏è–í—ã–±–æ—Ä –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏", "date"),
                       ("‚ñ™Ô∏è–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", "date_all")]
        keyboard = add_buttons_to_keyboard(keyboard, new_buttons)

        formatted_string = '\n üîò'.join(f'{item}' for item in task_list)
        formatted_string = 'üîò' + formatted_string
        await state.update_data(task_list=task_list)
        await callback.message.delete()
        await bot.send_message(
            chat_id=chat_id,
            text=f"–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n {formatted_string}"
                 "\n –í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏:",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
        await state.set_state(Summ.choosing)


@router.callback_query(StateFilter(Summ.choosing), F.data != "date", F.data == "date_all")
async def choose_all_channels(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    channel_list = user_data['channel_list']
    chat_id = user_data['chat_id']
    task_list = channel_list
    await state.update_data(task_list=task_list)
    formatted_string = '\n üîò'.join(f'{item}' for item in task_list)
    formatted_string = 'üîò' + formatted_string
    await bot.send_message(
        chat_id=chat_id,
        text=f"–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã –≤—Å–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:\n {formatted_string}",
        reply_markup=ReplyKeyboardRemove(),
        disable_web_page_preview=True
    )
    await state.set_state(Summ.choosing_date)
    await choose_date(callback, state)


@router.callback_query(StateFilter(Summ.choosing), F.data == "date", F.data != "date_all")
@router.callback_query(StateFilter(Summ.choosing_date))
async def choose_date(callback: CallbackQuery, state: FSMContext):
    keyboard = date_keyboard()
    await callback.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏:",
        reply_markup=keyboard
    )

    await state.set_state(Summ.generate_task)


@router.callback_query(StateFilter(Summ.generate_task))
async def choose_date(callback: CallbackQuery, state: FSMContext):
    interval = int(callback.data)
    user_data = await state.get_data()
    task_list = user_data['task_list']
    user_id = user_data['tg_id']
    task = Task(user_id=user_id, tg_tasked_channels=task_list, interval=interval)
    task.create_task()


@router.message(StateFilter(Summ.choosing_what_base_summ), F.text.in_(["–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"]))
@router.message(StateFilter(Summ.no_base), F.text.in_(["–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"]))
async def choose_channels(message: Message, state: FSMContext):
    await message.answer(
        text="–ü–æ –∫–∞–∫–∏–º –∫–∞–Ω–∞–ª–∞–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é? \n"
             "‚ñ™Ô∏è–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ –ø–æ–ª–µ –Ω–∏–∂–µ. \n"
             "‚ñ™Ô∏è–î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –ø—Ä–∏ –ø–æ–º–æ—â–∏ @SearcheeBot. \n"
             "‚ñ™Ô∏è–í–≤–µ–¥–∏—Ç–µ @SearcheeBot <–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞>. \n"
             "‚ñ™Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞, –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ. \n"
             "‚ñ™Ô∏è–í—Å—Ç–∞–≤—å—Ç–µ –µ–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞. \n"
             "‚ñ™Ô∏è–ü–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏.",
        reply_markup=ReplyKeyboardRemove()
    )

    # channel = open_queue()
    # new_buttons = [("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏", "summ")]
